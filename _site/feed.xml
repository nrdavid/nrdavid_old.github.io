<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-09T15:04:42-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle>Computational materials scientist and data scientist with a passion for open source software and reproducible research.
</subtitle><entry><title type="html">Connecting to a Docker Container via SSH</title><link href="http://localhost:4000/blog/2023/docker-ssh/" rel="alternate" type="text/html" title="Connecting to a Docker Container via SSH" /><published>2023-06-06T00:00:00-04:00</published><updated>2023-06-06T00:00:00-04:00</updated><id>http://localhost:4000/blog/2023/docker-ssh</id><content type="html" xml:base="http://localhost:4000/blog/2023/docker-ssh/"><![CDATA[<p>In this tutorial, we will show how to connect to a Ubuntu Docker container via SSH. Note that some images may containing portions blacked out for security purposes.</p>

<h2 id="0-creating-the-docker-container">0. Creating the Docker container</h2>

<p>Run the following command to create a new Docker container with the Ubuntu image publishing port 2200 on 22 in our Ubuntu machine.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">test</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">2200:22</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nt">-i</span><span class="w"> </span><span class="nx">ubuntu</span><span class="w"> </span><span class="nx">/bin/bash</span><span class="w">
</span></code></pre></div></div>

<p>Be sure to give root a password using</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passwd
</code></pre></div></div>

<h2 id="1-updating-upgrading-and-installing-openssh-server-and-nano">1. Updating, upgrading, and installing openSSH-server and nano</h2>

<p>Now that we have the container created and running, we will update and upgrade <code class="language-plaintext highlighter-rouge">apt</code>.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update <span class="o">&amp;&amp;</span> apt upgrade
</code></pre></div></div>
<p>Then we will need to install openssh-server.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>openssh-server
</code></pre></div></div>
<p>Now install nano.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>nano
</code></pre></div></div>

<h2 id="2-installing-and-adding-a-new-user-to-sudo">2. Installing and adding a new user to sudo</h2>
<p>When communicating remotely with any machine, security is a top priority. It is more secure to interface with the machine through a new user rather than root. With this, you can manage and restrict the permissions of the user, making your machine and data more secure. <br />
Before creating a new user, we will install sudo which stands for “superuser do” or “substitute user”.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install sudo</span>
</code></pre></div></div>
<p>Next we will create the new user.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>adduser USERNAME
</code></pre></div></div>
<p>We call this user ‘patrick’. You will be prompted to give patrick a password along with some other information that is optional. Next we will add patrick to the sudo group giving him sudo access.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usermod <span class="nt">-aG</span> <span class="nb">sudo </span>patrick
</code></pre></div></div>
<p>Now to switch to patrick (and between users) use</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>su patrick
</code></pre></div></div>
<p>Now whenever you want to run a command that requires sudo permissions, just prepend sudo.</p>

<h2 id="3-starting-and-stopping-ssh">3. Starting and stopping SSH</h2>
<p>Switch back to the root user. We will now begin the process of enabling SSH. After installing openssh-server, you will be able to use</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service <span class="nt">--status-all</span>
</code></pre></div></div>
<p>which will display the services and available and whether they are active. For example, this is what you should see if SSH is inactive.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ - ] dbus
[ ? ] hwclock.sh
[ - ] procps
[ - ] ssh
</code></pre></div></div>
<p>to active SSH, type</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service ssh start
</code></pre></div></div>
<p>then follow that by <code class="language-plaintext highlighter-rouge">service --status-all</code> and you should see the following.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ - ] dbus
[ ? ] hwclock.sh
[ - ] procps
[ + ] ssh
</code></pre></div></div>
<p>Before we are able to SSH into the container, we need allow for us to connect to root in the SSH config file.</p>

<p><strong>THIS IS OPTIONAL. WE DO NOT NEED TO ENABLE ROOT LOGIN. THIS IS ACTUALLY BAD PRACTICE. INSTEAD WE SHOULD JUST SSH TO PATRICK.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/ssh/sshd_config
</code></pre></div></div>
<p>Add <code class="language-plaintext highlighter-rouge">PermitRootLogin yes</code> under the Authentication section.</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-ssh/permit_root-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-ssh/permit_root-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-ssh/permit_root-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-ssh/permit_root.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Granting access to login as root SSH.</figcaption>

</figure>

<p>If you’re SSH server was running while doing this, you will need to restart the SSH service to apply the changes.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service ssh restart
</code></pre></div></div>

<p>Alternatively, to SSH to patrick,</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh</span><span class="w"> </span><span class="nx">patrick</span><span class="err">@</span><span class="nx">localhost</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">2200</span><span class="w">
</span></code></pre></div></div>
<p>and if this is your first time connecting, you will see the message in the image below.</p>

<div style="text-align:center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-ssh/patrick-ssh-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-ssh/patrick-ssh-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-ssh/patrick-ssh-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-ssh/patrick-ssh.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Granting access to login as patrick SSH.</figcaption>

</figure>

</div>

<h2 id="4-connecting-to-the-container-via-ssh-from-anoter-machine">4. Connecting to the container via SSH from anoter machine</h2>

<p>Ideally, we want to be able to SSH to the container from a machine other than our host. To do this, we will need to find the IP of the host machine. Into powershell type</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ipconfig</span><span class="w">
</span></code></pre></div></div>
<p>and take note of the IPv4 address. <strong>Note: If the IP address of your host machine is dynamic, this will change over time. In this case you will need an additional service to handle this. I will not be covering this in this tutorial.</strong></p>

<div style="text-align:center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-ssh/find-ip-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-ssh/find-ip-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-ssh/find-ip-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-ssh/find-ip.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Getting your host machine's IP address.</figcaption>

</figure>

</div>

<p>Now to connect to the container from another machine, type</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh</span><span class="w"> </span><span class="nx">patrick</span><span class="err">@</span><span class="nx">HOST_IP</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">2200</span><span class="w">
</span></code></pre></div></div>
<p>and you should be prompted for patrick’s password. Once entered, you will be connected. <strong>Note: Depending on the administrator settings of your host network of your host machine, you may need to VPN into the host network first.</strong></p>

<h2 id="5-conclusion">5. Conclusion</h2>
<p>In this tutorial we showed how to make a new user, install openssh-server, and connect to a Docker container via SSH. This is useful for remote development and testing.</p>]]></content><author><name></name></author><category term="tutorials," /><category term="code" /><summary type="html"><![CDATA[This guide will demonstrate how to connect to a Ubuntu Docker container via SSH for remote development.]]></summary></entry><entry><title type="html">Configuring SSH key authentication on a linux server</title><link href="http://localhost:4000/blog/2023/ssh-key-auth/" rel="alternate" type="text/html" title="Configuring SSH key authentication on a linux server" /><published>2023-06-06T00:00:00-04:00</published><updated>2023-06-06T00:00:00-04:00</updated><id>http://localhost:4000/blog/2023/ssh-key-auth</id><content type="html" xml:base="http://localhost:4000/blog/2023/ssh-key-auth/"><![CDATA[<p>There are a few different ways to connect to a linux server. The most common way is to use a password. However, this is not the most secure way to connect to a server. A more secure way is to use SSH key authentication. This guide will demonstrate how to configure SSH key authentication on a linux server.</p>

<h2 id="0-what-is-ssh-key-authentication">0. What is SSH key authentication?</h2>
<p>SSH key authentication is a way to connect to a linux server without using a password. Password authentication can be brute-forced by powerful computers. In SSH key authentication we instead use a public and private key pair. These key pairs are cryptographically secure keys that can be used to authenticate a client to an SSH server. The private key is held by the client and should never be shared. Compromise of the private key will result in a breach. The public key is held by the server and can be shared with anyone. The public key is used to verify the client’s identity. The public key is also used to encrypt messages that can only be decrypted by the private key. This is called <em>asymmetric encryption</em>. They public key is added to a special file within the user account that you’ll be logging into called <code class="language-plaintext highlighter-rouge">~/.ssh/authorized_keys</code>. When a client attempts to authenticate using the SSH key, the server will test the client by encrypting a message with the public key. If the client can decrypt the message with the private key, the client is authenticated and a session is spawned.</p>

<h2 id="1-creating-the-ssh-key-pair">1. Creating the SSH key pair</h2>

<p>On your local computer, generate the SSH key pair using the following command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh-keygen</span><span class="w">
</span></code></pre></div></div>
<p>By default, the keys will be stored in the <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory. You will be prompted to enter a passphrase. This is an optional security measure. If you choose to use a passphrase, you will be prompted to enter it every time you use the key pair. If you do not want to use a passphrase, just press enter. The public key will be stored in <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code> and the private key will be stored in <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa</code>. If you already have a key pair, you can choose to overwrite it. <strong>Warning</strong> You will not be able to authenticate using the previous key pair if you overwrite it. If done successfully, you should see something like this:</p>

<div style="text-align:center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/ssh-key-auth/keygen_success-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/ssh-key-auth/keygen_success-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/ssh-key-auth/keygen_success-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/ssh-key-auth/keygen_success.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Successful public and private key pair generation.</figcaption>

</figure>

</div>

<h2 id="2a-copying-the-ssh-public-key-to-your-server---ssh-copy-id">2a. Copying the SSH public key to your server - ssh-copy-id</h2>

<p>Now that you have generated the SSH key pair, you need to copy the public key to your server. You can do this using the <code class="language-plaintext highlighter-rouge">ssh-copy-id</code> command. The syntax is as follows:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh-copy-id</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">port_number</span><span class="w"> </span><span class="nx">username</span><span class="err">@</span><span class="nx">remote_host</span><span class="w">
</span></code></pre></div></div>
<p>where you would replace username, remote_host, and port_number with your own values. You will be prompted to enter your password. If done successfully, you should see something like this:</p>

<div style="text-align:center">
<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/ssh-key-auth/ssh_copy_success-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/ssh-key-auth/ssh_copy_success-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/ssh-key-auth/ssh_copy_success-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/ssh-key-auth/ssh_copy_success.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Successful ssh-copy-id to server.</figcaption>

</figure>

</div>

<h2 id="2b-copying-the-ssh-public-key-to-your-server---ssh">2b. Copying the SSH public key to your server - SSH</h2>

<p>If you do not have the <code class="language-plaintext highlighter-rouge">ssh-copy-id</code> command, you can copy the public key to your server using the <code class="language-plaintext highlighter-rouge">ssh</code> command. The syntax is as follows:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat</span><span class="w"> </span><span class="nx">~/.ssh/id_rsa.pub</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ssh</span><span class="w"> </span><span class="nx">username</span><span class="err">@</span><span class="nx">remote_host</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">port_number</span><span class="w"> </span><span class="s2">"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys"</span><span class="w">
</span></code></pre></div></div>
<p>where you would replace username, remote_host, and port_number with your own values. You will be prompted to enter your password.</p>

<h2 id="3-authenticating-to-your-server-using-ssh-keys">3. Authenticating to your server using SSH keys</h2>

<p>Simply type the following command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh</span><span class="w"> </span><span class="nx">username</span><span class="err">@</span><span class="nx">remote_host</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">port_number</span><span class="w">
</span></code></pre></div></div>
<p>where you would replace username, remote_host, and port_number with your own values. If you did not use a passphrase, you will be logged in immediately. If you did use a passphrase, you will be prompted to enter it.</p>

<h2 id="4-disabling-password-authentication">4. Disabling password authentication</h2>

<p>Now that we’ve successfully authenticated using SSH keys, we can disable password authentication. This will prevent anyone from logging in using a password. To do this, we need to edit the <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code> file on your server. Open the file using your favorite text editor. I’ll be using nano:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span><span class="w"> </span><span class="nx">nano</span><span class="w"> </span><span class="nx">/etc/ssh/sshd_config</span><span class="w">
</span></code></pre></div></div>
<p>Search for the directive called PasswordAuthentication. Uncomment it and set it to no:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PasswordAuthentication no
</code></pre></div></div>
<p>Save the file and exit. Now restart the SSH service:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service ssh restart
</code></pre></div></div>

<p>Now if you attempt to login from a machine that does not have the SSH key pair, you will be denied access and not allowed to enter a password.</p>

<h2 id="5-conclusion">5. Conclusion</h2>
<p>In this tutorial we explored how to configure SSH key authentication on a linux server. We also explored how to disable password authentication. This is a more secure way to connect to a linux server. There are many other security measures you can take to protect your linux server. This guide is based off the following <a href="https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server">DigitalOcean tutorial</a>. If you would like to read more about how to protect your linux server, you can read the following <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-securing-your-linux-vps">DigitalOcean tutorial</a>.</p>]]></content><author><name></name></author><category term="tutorials," /><category term="code" /><summary type="html"><![CDATA[This guide will demonstrate how to configure SSH key authentication on a linux server.]]></summary></entry><entry><title type="html">Creating a Linux Docker Container for Development on Windows</title><link href="http://localhost:4000/blog/2023/docker-setup/" rel="alternate" type="text/html" title="Creating a Linux Docker Container for Development on Windows" /><published>2023-06-05T00:00:00-04:00</published><updated>2023-06-05T00:00:00-04:00</updated><id>http://localhost:4000/blog/2023/docker-setup</id><content type="html" xml:base="http://localhost:4000/blog/2023/docker-setup/"><![CDATA[<p>In this tutorial, we will demonsrate how to get started with Docker by creating a container with the latest version of Ubuntu. This tutorial is intended for new users of Docker. Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software packages called <em>containers</em>. The software that hosts the containers is called the <strong>Docker Engine</strong>. Code developers, such as ourselves, will enjoy all the benefits of a unix based development environment by creating a docker container with the Ubuntu image.</p>

<h2 id="0-installing-docker">0. Installing Docker</h2>

<p>Visit <a href="https://www.docker.com">Docker</a> then download and install Docker desktop which will provide the backend and a friendly GUI for managing your machines. Make sure the ‘Use WSL2 instead of Hyper-V (recommended)’ box is checked. You will need to restart windows in order for the installation to complete. You may also receive a dialogue indicating that Docker Desktop requires a newer WSL kernel version. In this case type</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl</span><span class="w"> </span><span class="nt">--update</span><span class="w">
</span></code></pre></div></div>
<p>into Powershell. Now restart Docker Desktop.</p>

<h2 id="1-pulling-an-image">1. Pulling an Image</h2>

<p>The <a href="https://hub.docker.com/">Docker Hub</a> supports the upload and download of many different Docker <em>images</em>. These images act as a set of instructions to build a Docker container. There are a variety of different images including mysql, nodejs, nginx, and my more. We’re interested in creating a Ubuntu Docker container so we’ll type into Powershell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">pull</span><span class="w"> </span><span class="nx">ubuntu</span><span class="w">
</span></code></pre></div></div>
<p>Throughout this tutorial, it is a good idea to keep the Docker Desktoop app open to provide yourself with GUI feedback to these oprations. Many of the operations I describe here can also be performed within the confines of the Docker Desktop application. If done successfully, you should see the ubuntu image under the ‘images’ section of Docker Desktop.</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-setup/pull-success-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-setup/pull-success-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-setup/pull-success-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-setup/pull-success.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Successful pull of ubuntu image.</figcaption>

</figure>

<h2 id="2-creating-the-container">2. Creating the container</h2>

<p>Now that we have the Ubutun image successfully downloaded, we can create the Docker container. To do this, we can type the following command into Powershell.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">CONTAINER_NAME</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">2200:22</span><span class="w"> </span><span class="nt">-v</span><span class="w"> </span><span class="nx">FILE_PATH:/src</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nt">-i</span><span class="w"> </span><span class="nx">ubuntu</span><span class="w"> </span><span class="nx">/bin/bash</span><span class="w">
</span></code></pre></div></div>
<p>Let’s disect this command. The <code class="language-plaintext highlighter-rouge">docker run</code> command creates and runs a new container from an image. The <code class="language-plaintext highlighter-rouge">--name</code> flag allows us to name the container <code class="language-plaintext highlighter-rouge">CONTAINER_NAME</code>. This can be whatever you want. Next the <code class="language-plaintext highlighter-rouge">-p</code> flag publishes our local port 2200 and fowards that to port 22 in the container. The <code class="language-plaintext highlighter-rouge">-v</code> flag bind mounts a volume specified by <code class="language-plaintext highlighter-rouge">FILE_PATH</code> and puts it in the <code class="language-plaintext highlighter-rouge">src</code> folder in the container. This will allow us to share the directory we specify, with the container. This street is two ways so anything written to <code class="language-plaintext highlighter-rouge">src</code> in the container will be written to <code class="language-plaintext highlighter-rouge">FILE_PATH</code> on the host machine and vice versa. <code class="language-plaintext highlighter-rouge">-t</code> allocates a pseduo-TTY and <code class="language-plaintext highlighter-rouge">-i</code> keeps STDIN open. Lastly, we specify the image we want docker to create the container from, <code class="language-plaintext highlighter-rouge">ubuntu</code> and we tell it to execute bash. If done successfully, you will see <code class="language-plaintext highlighter-rouge">root@some_string:/#</code> indicating that you have entered the container as <code class="language-plaintext highlighter-rouge">root</code>. <br />
To exit the container simply type</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exit</span>
</code></pre></div></div>
<p>To enter back into the running container type</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nt">-it</span><span class="w"> </span><span class="nx">CONTAINER_NAME</span><span class="w"> </span><span class="nx">bash</span><span class="w">
</span></code></pre></div></div>
<p>Furthermore, to stop a running container, first exit the container then type</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">stop</span><span class="w"> </span><span class="nx">CONTAINER_NAME</span><span class="w">
</span></code></pre></div></div>
<p>To start the container again type,</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="nt">-i</span><span class="w"> </span><span class="nx">CONTAINER_NAME</span><span class="w">
</span></code></pre></div></div>
<p>which will bring you back to root. From the Docker Desktop application, you can see a list of all your containers and actions you can perform with them.</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-setup/running_container-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-setup/running_container-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-setup/running_container-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-setup/running_container.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">A list of containers inside Docker Desktop.</figcaption>

</figure>

<h2 id="3-conclusion">3. Conclusion</h2>

<p>In this tutorial, we learned how to create a Docker container from a downloaded image. We also covered some of the basic Docker commands you need to get started. Happy Dockerizing!</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/docker-setup/whale-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/docker-setup/whale-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/docker-setup/whale-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/docker-setup/whale.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">The Docker Whale having fun containerizing with Mr. Tentacles.</figcaption>

</figure>]]></content><author><name></name></author><category term="tutorials," /><category term="code" /><summary type="html"><![CDATA[This guide will demonstrate how to create a linux docker container for code development on a native Windows OS.]]></summary></entry><entry><title type="html">Onboarding - The Volcano Plot</title><link href="http://localhost:4000/blog/2022/volcano-guide/" rel="alternate" type="text/html" title="Onboarding - The Volcano Plot" /><published>2022-08-15T00:00:00-04:00</published><updated>2022-08-15T00:00:00-04:00</updated><id>http://localhost:4000/blog/2022/volcano-guide</id><content type="html" xml:base="http://localhost:4000/blog/2022/volcano-guide/"><![CDATA[<p>Welcome! This guide will teach you how to get started with Python and <a href="https://materialsproject.org/api">The Materials Project API</a>. The Materials Project is a powerful database providing access to over 140,000 unique materials. These materials along with a plethora of their properties were calculated <em>ab-initio</em>, or from first principles. Many of these calculations are driven by high-throughput density-functional theory (DFT). Given only a materials crystal structure, DFT can calculate a variety of different materials properties. By the end of this guide you’ll have learned to (1) run Python scripts, (2) connect to the Materials Project API, and (3) plot in <a href="https://matplotlib.org/">matplotlib</a>. This will be done by creating what we like to call “The Volcano Plot” from the paper, <a href="https://www.nature.com/articles/s41563-019-0396-2">“A map of the inorganic ternary metal nitrides”</a>, by Wenhao Sun et al.</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/volcano-guide/volcano_plot_src-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/volcano-guide/volcano_plot_src-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/volcano-guide/volcano_plot_src-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/volcano-guide/volcano_plot_src.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">The Volcano plot.</figcaption>

</figure>

<h2 id="getting-started-with-python">Getting started with Python</h2>

<p>There are many different guides online for getting started with Python. This guide will use <a href="https://www.anaconda.com/">Anaconda</a> for managing Python environments and <a href="https://code.visualstudio.com/">Visual Studio Code</a> as an intergrated development environment (IDE).</p>

<h3 id="1-setting-up-a-conda-environment">1. Setting up a conda environment</h3>

<p>Download and install <a href="https://www.anaconda.com/">Anaconda</a>. Follow the installation instructions for your OS. Open a new terminal and create a new environment using the <code class="language-plaintext highlighter-rouge">conda create --name myenv</code> command. Replace <code class="language-plaintext highlighter-rouge">myenv</code> with your desired environment name. Now to navigate to your new environment use <code class="language-plaintext highlighter-rouge">conda activate myenv</code> and to naviagate away use <code class="language-plaintext highlighter-rouge">conda deactivate myenv</code>. Now your ready to use Python! Simply navigate to your new environment and type <code class="language-plaintext highlighter-rouge">python</code> to enter the interactive interpreter.</p>

<h3 id="2-setting-up-visual-studo-code-vscode">2. Setting up Visual Studo Code (VSCode)</h3>

<p>Download and install <a href="https://code.visualstudio.com/">Visual Studo Code</a>. Follow the installation instructions for your OS. VSCode is a lightweight IDE used for a variety of langauges. Once installed open VSCode and navigate to the “Extensions” tab. Search the marketplace for the “Python” extension and install. Once installed VSCode will be able to recognize Python, giving you meaningful feedback from the IDE when writing your code.</p>

<p>Now locate the “New File” option in VSCode to create a new file. Then save it as a <code class="language-plaintext highlighter-rouge">.py</code> file to tell VSCode that this file is a python script. Now in VSCode open a “New Terminal” using the toolbar. From here you should have opened a new interactive shell within VSCode. Now active your conda environment and type <code class="language-plaintext highlighter-rouge">python filename.py</code> to run your script (make sure your in the same directory as your saved python file).</p>

<figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog/volcano-guide/vscode_python_good-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog/volcano-guide/vscode_python_good-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog/volcano-guide/vscode_python_good-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/blog/volcano-guide/vscode_python_good.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture><figcaption class="caption">Getting Python setup in VSCode.</figcaption>

</figure>

<p>At this point it’s also a good idea to open the Command Palette to tell VSCode (and Pylance) which Python interpreter to point to. This will allow VSCode to properly identify which packages you have installed and which you do not. Use <span style="color:blue">⇧⌘P</span> (Mac) or <span style="color:blue"><code class="language-plaintext highlighter-rouge">Ctrl+Shift+P</code></span> (Windows). Then type <code class="language-plaintext highlighter-rouge">Python: Select Interpreter</code> and select the option. From here you should see all your available global environments. Choose the one you’ve setup and are using.</p>

<h2 id="connecting-to-the-materials-project-api">Connecting to the Materials Project API</h2>

<p>The Materials Project allows anyone to have direct access to current, most up-to-date information for the Materials Project database through their application programming interface (API).</p>

<h3 id="1-getting-a-key">1. Getting a Key</h3>

<p>Go to the <a href="https://materialsproject.org/api"> Materials Project API</a> and create an account to acquire a key. This key is your API access to their database. Keep track of this.</p>

<h3 id="2-connecting-to-the-api">2. Connecting to the API</h3>

<p>Since you’ve created a new conda environment, you’ll need to install the required packages in order to connect to the Materials Project API. This can be done via <code class="language-plaintext highlighter-rouge">conda install &lt;package name&gt;</code>. In your environment type:</p>

<p><code class="language-plaintext highlighter-rouge">conda install mp-api</code></p>

<p>into your terminal. After doing open a new python file and run the following code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Testing connectivity to API by grabbing data for "mp-149"
</span><span class="kn">from</span> <span class="nn">mp_api</span> <span class="kn">import</span> <span class="n">MPRester</span>
<span class="k">with</span> <span class="n">MPRester</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">YOUR_KEY</span><span class="p">)</span> <span class="k">as</span> <span class="n">mpr</span><span class="p">:</span>
    <span class="n">doc</span> <span class="o">=</span> <span class="n">mpr</span><span class="p">.</span><span class="n">summary</span><span class="p">.</span><span class="n">get_data_by_id</span><span class="p">(</span><span class="s">"mp-149"</span><span class="p">)</span>
</code></pre></div></div>
<p>If the code above executes with no errors, you’re all set!</p>

<h2 id="completing-the-onboarding-assignment">Completing the Onboarding Assignment</h2>

<p>Now you have all the necessary ground work to produce the volcano plot! The next steps are entirely up to you, but I would recommend following the ordered list below.</p>

<ol>
  <li>Read <a href="https://www.nature.com/articles/s41563-019-0396-2">“A map of the inorganic ternary metal nitrides”</a>, by Wenhao Sun et al.</li>
  <li>Read the <a href="https://docs.materialsproject.org/">Materials Project API Docs</a> and play around with the API functionality.</li>
  <li>Apply dynamic programming to acquire the data needed to create the volcano plot.</li>
  <li>Familiarize yourself with <a href="https://matplotlib.org/">matplotlib</a>, then make the plot! Note: The plot may look slightly different from API changes over the years.</li>
</ol>

<p>Lastly, good luck!</p>]]></content><author><name></name></author><category term="tutorials," /><category term="code" /><summary type="html"><![CDATA[This guide is meant for new members of the Sun group, or anyone interested in getting started with the Materials Project API.]]></summary></entry></feed>